D

Q.
다음은 벡터를 위한 클래스이다. 여기에는 퀵 정렬(quick sort) 방법을 이용하여 벡터를 정렬하는 메소드가 포함되어 있다.

class Vector {
    public int[] v;
    public Vector() {
        v = new int[100];
    }
    static void Swap(ref int x, ref int y) {
        int temp = x;
        x = y;
        y = temp;
    }
    public void Qsort(int left, int right) {
        int pe;
        int i, last;
        
        if (left >= right) return;
        pe = (left+right)/2;
        Swap(ref v[left], ref v[pe]);
        last = left;
        for (i=left+1; i<=right; i++)
            if (v[i] < v[left]) Swap(ref v[++last], ref v[i]);
        Swap(ref v[left], ref v[last]);
        Qsort(left, last-1);
        Qsort(left+1, right);
    }
}


(1)
크기를 받아 초기화하는 생성자를 작성하시오.

(2)
벡터 클래스를 테스트하는 프로그램을 작성하시오. 즉, 일련의 데이터(입력 데이터의 끝은 0)를 읽어 정렬한 후 출력하는 프로그램을 작성하는 것이다.
*퀵 정렬은 정렬할 원소들 중 하나를 기준 값으로 선정하여 이 값보다 작은 원소들과 같거나 큰 원소들로 분리하여 이들 각각에 대해 순환적으로 퀵 정렬을 적용하여 크기순으로 정렬하는 알고리즘이다. 이때, 기준이 되는 값을 분할 원소(partition element)라 부른다.

A.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Es04_14
{
    class Vector
    {
        public int[] v;
        //private int ss;

        public Vector()
        {
            v = new int[100];
        }

        public Vector(int size)
        {
            v = new int[size];
        }

        public int this[int index]

        {
            get { return v[index]; }
            set { v[index] = value; }
        }

        static void Swap(ref int x, ref int y)
        {
            int temp = x;
            x = y;
            y = temp;
        }

        public void Qsort(int left, int right)
        {
            int pe;
            int i, last;

            if (left >= right) return;
            pe = (left + right) / 2;             //pe = partition element
            Swap(ref v[left], ref v[pe]);
            last = left;
            for (i = left + 1; i <= right; i++)
                if (v[i] < v[left]) Swap(ref v[++last], ref v[i]);
            Swap(ref v[left], ref v[last]);
            Qsort(left, last - 1);
            Qsort(left + 1, last);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            int input, i;
            Vector v = new Vector(10);

            Console.WriteLine("숫자를 입력하세요(최대 10개). 입력의 끝은 0입니다.");
            for (i = 0; i < 10; i++)
            {
                input = int.Parse(Console.ReadLine());
                if (input == 0) break;
                else v[i] = input;
            }

            v.Qsort(0, i - 1);
            for (i = 0; i < 10; i++)
            {
                if (v[i] == 0) break;
                else
                    Console.Write(v[i] + " ");
            }
        }
    }
}